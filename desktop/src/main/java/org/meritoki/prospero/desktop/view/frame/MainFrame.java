/*
 * Copyright 2022 Joaquin Osvaldo Rodriguez
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.meritoki.prospero.desktop.view.frame;

import java.awt.Image;
import java.io.File;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.UUID;

import javax.swing.JPanel;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.meritoki.prospero.desktop.controller.node.NodeController;
import org.meritoki.prospero.desktop.view.dialog.AboutDialog;
import org.meritoki.prospero.desktop.view.dialog.MainDialog;
import org.meritoki.prospero.library.model.Model;
import org.meritoki.prospero.library.model.plot.Plot;
import org.meritoki.prospero.library.model.query.Query;
import org.meritoki.prospero.library.model.table.Table;
import org.meritoki.prospero.library.model.unit.Script;
import org.meritoki.prospero.library.model.vendor.microsoft.Excel;

/**
 *
 * @author jorodriguez
 */
public class MainFrame extends javax.swing.JFrame {

	private static final long serialVersionUID = -1201441426706336659L;
	static Logger logger = LogManager.getLogger(MainFrame.class.getName());
	public Model model;
	public MainDialog mainDialog = new MainDialog(this, false);
	public AboutDialog aboutDialog = new AboutDialog(this, false);

	/**
	 * Creates new form MainFrame2
	 */
	public MainFrame() {
		initComponents();
		this.setTitle("Prospero Desktop Application");
	}
	
	public MainDialog getMainDialog() {
		return this.mainDialog;
	}

	public void setModel(Model model) {
//		logger.info("setModel("+model+")");
		this.model = model;
		this.mainDialog.setModel(this.model);
		this.mainDialog.setVisible(true);
		this.gridPanel.setModel(this.model);
		this.solarPanel.setModel(this.model);
		this.plotPanel.setModel(this.model);
		this.tablePanel.setModel(this.model);
		this.init();
	}

	public void init() {
//		logger.info("init()");
		this.mainDialog.init();
		this.plotPanel.repaint();
		this.solarPanel.repaint();
		this.gridPanel.repaint();
		this.plotPanel.repaint();
		this.tablePanel.repaint();
	}
	
	public JPanel getGridPanel() {
		return this.gridPanel;
	}
	
	public JPanel getPlotPanel() {
		return this.plotPanel;
	}
	
	public void saveQuery(Query query) {
//		logger.info("savePanels("+query+")");
		Date dateTime = Calendar.getInstance().getTime();
    	String date = new SimpleDateFormat("yyyyMMdd").format(dateTime);
//    	String time = new SimpleDateFormat("HHmm").format(dateTime);
    	String name = query.getName();
    	String uuid = UUID.randomUUID().toString();
		String path = "output" + File.separatorChar + date + File.separatorChar + name;
		File directory = new File(path);
		if(!directory.exists()) {
			directory.mkdirs();
		}
		Script script = new Script();
		script.queryList.add(query);
		name += "-"+uuid;
		NodeController.saveJson(path, name+".json", script);
		this.saveGridPanel(path, name);
		this.savePlotPanel(path, name, uuid);
	}
	
	public void saveGridPanel(String path, String name) {
		NodeController.savePanel(this.gridPanel, path,"grid-"+((name !=null)?name:""));
	}
	
	public void savePlotPanel(String path, String name, String uuid) {
    	Excel excel = new Excel();
    	for(Plot plot: this.plotPanel.plotList) {
			if(plot != null) {
				for(Table table: plot.tableList) {
					excel.sheetMap.put(table.name,Table.getTableData(table.tableModel));
				}
				Image image = plot.getImage();
				if(image != null) {
					String fileName;
					fileName = "plot-"+plot.data+"-"+uuid+".png";
					try {
						NodeController.savePng(path, fileName, NodeController.toBufferedImage(image));
					} catch (Exception e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
			}
		}
    	excel.save(path, "table"+((name !=null)?"-"+name:""));
	}

	// this.setSize(1024, 512);
	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        solarPanel = new org.meritoki.prospero.desktop.view.panel.SolarPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        gridPanel = new org.meritoki.prospero.desktop.view.panel.GridPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        plotPanel = new org.meritoki.prospero.desktop.view.panel.PlotPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablePanel = new org.meritoki.prospero.desktop.view.panel.TablePanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        windowMenu = new javax.swing.JMenu();
        dialogMenu = new javax.swing.JMenu();
        mainDialogMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        aboutMenuItem = new javax.swing.JMenuItem();

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout solarPanelLayout = new javax.swing.GroupLayout(solarPanel);
        solarPanel.setLayout(solarPanelLayout);
        solarPanelLayout.setHorizontalGroup(
            solarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 948, Short.MAX_VALUE)
        );
        solarPanelLayout.setVerticalGroup(
            solarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 458, Short.MAX_VALUE)
        );

        jScrollPane3.setViewportView(solarPanel);

        jTabbedPane1.addTab("Solar", jScrollPane3);

        javax.swing.GroupLayout gridPanelLayout = new javax.swing.GroupLayout(gridPanel);
        gridPanel.setLayout(gridPanelLayout);
        gridPanelLayout.setHorizontalGroup(
            gridPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 948, Short.MAX_VALUE)
        );
        gridPanelLayout.setVerticalGroup(
            gridPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 458, Short.MAX_VALUE)
        );

        jScrollPane5.setViewportView(gridPanel);

        jTabbedPane1.addTab("Grid", jScrollPane5);

        plotPanel.setLayout(new javax.swing.BoxLayout(plotPanel, javax.swing.BoxLayout.LINE_AXIS));
        jScrollPane6.setViewportView(plotPanel);

        jTabbedPane1.addTab("Plot", jScrollPane6);

        jScrollPane1.setViewportView(tablePanel);

        jTabbedPane1.addTab("Table", jScrollPane1);

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        windowMenu.setText("Window");

        dialogMenu.setText("Dialog");

        mainDialogMenuItem.setText("Main");
        mainDialogMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainDialogMenuItemActionPerformed(evt);
            }
        });
        dialogMenu.add(mainDialogMenuItem);

        windowMenu.add(dialogMenu);

        jMenuBar1.add(windowMenu);

        helpMenu.setText("Help");

        aboutMenuItem.setText("About");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(aboutMenuItem);

        jMenuBar1.add(helpMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 448, Short.MAX_VALUE)
        );

        this.setSize(1024+256, 512+256);
//        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mainDialogMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mainDialogMenuItemActionPerformed
         this.mainDialog.setVisible(true);
    }//GEN-LAST:event_mainDialogMenuItemActionPerformed

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_aboutMenuItemActionPerformed

	private void timeMenuItemActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_timeMenuItemActionPerformed
//		this.timeDialog.setVisible(true);
	}// GEN-LAST:event_timeMenuItemActionPerformed

	private void modelMenuItemActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_modelMenuItemActionPerformed
//		this.modelDialog.setVisible(true);
	}// GEN-LAST:event_modelMenuItemActionPerformed

	private void scriptMenuItemActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_scriptMenuItemActionPerformed
//		this.scriptDialog.setVisible(true);
	}// GEN-LAST:event_scriptMenuItemActionPerformed

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		// <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
		// (optional) ">
		/*
		 * If Nimbus (introduced in Java SE 6) is not available, stay with the default
		 * look and feel. For details see
		 * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		// </editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new MainFrame().setVisible(true);
			}
		});
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenu dialogMenu;
    private org.meritoki.prospero.desktop.view.panel.GridPanel gridPanel;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JMenuItem mainDialogMenuItem;
    private org.meritoki.prospero.desktop.view.panel.PlotPanel plotPanel;
    private org.meritoki.prospero.desktop.view.panel.SolarPanel solarPanel;
    private org.meritoki.prospero.desktop.view.panel.TablePanel tablePanel;
    private javax.swing.JMenu windowMenu;
    // End of variables declaration//GEN-END:variables
}
//Plot plot = this.plotPanel.plotList.get(i);
//NodeController.savePanel(this.plotPanel, path,"plot-"+((name !=null)?name:""));
//Excel excel = new Excel();
//List<Plot> plotList;
//try {
//	plotList = model.getPlotList();
//	for(Plot p: plotList) {
//		for(Table table: p.tableList) {
//			excel.sheetMap.put(table.name,Table.getTableData(table.tableModel));
//		}
//    }
//    excel.save(path, "table-"+((name !=null)?name:""));
//} catch (Exception e) {
//	// TODO Auto-generated catch block
//	e.printStackTrace();
//}
//public void test() {
//if(this.model.test) {
//	Variable var = this.model.getVariable("Density");
//	var.query.put("time", "djf");
//	var.query.put("average","true");
//	var.query.put("group","month");
//	var.query.put("dimension","2");
////	var.query.put("analysis", "significance");
//	var.query.put("region","-75,-180:-15,180");
//	var.query.put("source","UTN ERA INTERIM");
//	var.init();
////	var.source = "UTN ERA Interim";
//	var.start();
//	Query q = var.query;
//	var.query(q);
//}
//}